stages:
  - Test
  - Build
  - Deploy
  - Report
  - Sentry

variables:
  COMPOSE_DOCKER_CLI_BUILD: 1
  DOCKER_BUILDKIT: 1
  SENTRY_ORG: $SENTRY_ORG
  SENTRY_PROJECT_NAME: {{cookiecutter.project_slug}}-backend
  SENTRY_URL: $SENTRY_URL
  VERSION_BEFORE_REF: $CI_COMMIT_BEFORE_SHA
  VERSION_REF: $CI_COMMIT_SHA

sentry_release:
  stage: .pre
  image: docker:20
  services:
    - docker:20-dind
  script:
    - RELEASE_START=$(date +%s)
    - >
      docker run --rm
      -v ${PWD}:${PWD}
      -w ${PWD}
      -e SENTRY_AUTH_TOKEN
      -e SENTRY_DSN
      -e SENTRY_ORG
      -e SENTRY_URL
      getsentry/sentry-cli:latest sh -c
      "sentry-cli releases new $VERSION_REF -p $SENTRY_PROJECT_NAME --log-level=debug;
      sentry-cli releases set-commits $VERSION_REF --auto;
      sentry-cli releases finalize $VERSION_REF"
  only:
    - develop
    - master
    - tags

test:
  stage: Test
  image: docker/compose:debian-1.29.2
  services:
    - docker:20-dind
  variables:
    BACKEND_CONTAINER_NAME: "${CI_PROJECT_PATH_SLUG}-${CI_JOB_NAME}-${CI_JOB_ID}_backend"
    BACKEND_BUILD_TARGET: "test"
    BACKEND_IMAGE_NAME: "gitlabci_{{cookiecutter.project_slug}}_backend"
    BACKEND_IMAGE_TAG: "$CI_JOB_NAME-$CI_JOB_ID"
    COMPOSE_PROJECT_NAME: "${CI_PROJECT_PATH_SLUG}-${CI_JOB_NAME}-${CI_JOB_ID}"
  script:
    - docker-compose build
    - docker-compose run --name ${BACKEND_CONTAINER_NAME} backend
    - docker cp ${BACKEND_CONTAINER_NAME}:/app/htmlcov htmlcov
  after_script:
    - docker-compose down -v
  coverage: '/^TOTAL.*\s+(\d+\%)$/'
  artifacts:
    paths:
      - htmlcov
    expire_in: 1 day

pages:
  stage: Report
  image: busybox
  script:
    - mkdir public
    - mv htmlcov public/htmlcov
  artifacts:
    paths:
      - public
  dependencies:
    - test
  only:
    - develop

build:
  stage: Build
  image: docker:20
  services:
    - docker:20-dind
  before_script:
    - export DOCKER_CONFIG=$PWD/.dockerconfig
    - docker login -u gitlab-ci-token -p $CI_BUILD_TOKEN $CI_REGISTRY
  script:
    - docker build -t $CI_REGISTRY/$CI_PROJECT_PATH:$VERSION_REF --target remote --pull .
    - docker push $CI_REGISTRY/$CI_PROJECT_PATH:$VERSION_REF
  after_script:
    - docker logout $CI_REGISTRY
  only:
    - develop
    - master
    - tags

.development:
  variables:
    DEPLOY_ENVIRONMENT: development
  environment:
    name: Development
    url: https://dev.{{cookiecutter.domain_url}}
  only:
    - develop

.integration:
  variables:
    DEPLOY_ENVIRONMENT: integration
  environment:
    name: Integration
    url: https://test.{{cookiecutter.domain_url}}
  only:
    - master

.production:
  variables:
    DEPLOY_ENVIRONMENT: production
  environment:
    name: Production
    url: https://www.{{cookiecutter.domain_url}}
  only:
    - tags

.deploy-base:
  stage: Deploy
  image:
    name: docker:20
  services:
    - docker:20-dind
  script:
    - >
      docker run --rm -v $PWD:/app -v $KUBE_CA_PEM_FILE:$KUBE_CA_PEM_FILE
      -e KUBECONFIG=/tmp/.kube/config
      -e DEPLOY_ENVIRONMENT
      -e DEPLOY_VERSION
      -e KUBE_CA_PEM_FILE
      -e KUBE_TOKEN
      -e KUBE_URL
      --entrypoint=""
      bitnami/kubectl:latest /app/scripts/deploy.sh

.deploy:
  extends: .deploy-base
  before_script:
    - export DEPLOY_VERSION=$VERSION_REF

deploy_development:
  extends:
    - .development
    - .deploy

deploy_integration:
  extends:
    - .integration
    - .deploy

deploy_production:
  extends:
    - .production
    - .deploy

.rollback:
  extends: .deploy-base
  before_script:
    - export DEPLOY_VERSION=$VERSION_BEFORE_REF
  when: manual

rollback_development:
  extends:
    - .development
    - .rollback

rollback_integration:
  extends:
    - .integration
    - .rollback

rollback_production:
  extends:
    - .production
    - .rollback

.sentry_deploy_success:
  stage: Sentry
  when: on_success
  image: docker:20
  services:
    - docker:20-dind
  script:
    - RELEASE_END=$(date +%s)
    - >
      docker run --rm
      -e SENTRY_AUTH_TOKEN
      -e SENTRY_DSN
      -e SENTRY_ORG
      -e SENTRY_URL
      getsentry/sentry-cli:latest sentry-cli releases deploys $VERSION_REF new -e $SENTRY_ENV -t $((RELEASE_END-RELEASE_START))

sentry_success_development:
  extends: .sentry_deploy_success
  variables:
    SENTRY_ENV: Development
  only:
    - develop

sentry_success_integration:
  extends: .sentry_deploy_success
  variables:
    SENTRY_ENV: Integration
  only:
    - master

sentry_success_production:
  extends: .sentry_deploy_success
  variables:
    SENTRY_ENV: Production
  only:
    - tags

.sentry_deploy_failure:
  stage: Sentry
  when: on_failure
  image: docker:20
  services:
    - docker:20-dind
  script:
    - >
      docker run --rm
      -e SENTRY_AUTH_TOKEN
      -e SENTRY_DSN
      -e SENTRY_ORG
      -e SENTRY_URL
      getsentry/sentry-cli:latest sentry-cli send-event -m "Deploy to $SENTRY_ENV failed."

sentry_failure_development:
  extends: .sentry_deploy_failure
  variables:
    SENTRY_ENV: Development
  only:
    - develop

sentry_failure_integration:
  extends: .sentry_deploy_failure
  variables:
    SENTRY_ENV: Integration
  only:
    - master

sentry_failure_production:
  extends: .sentry_deploy_failure
  variables:
    SENTRY_ENV: Production
  only:
    - tags

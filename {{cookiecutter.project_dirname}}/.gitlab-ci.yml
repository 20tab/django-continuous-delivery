stages:
  - Test
  - Build
  - Deploy
  - Report

variables:
  DOCKER_HOST: tcp://docker:2375
  DOCKER_TLS_CERTDIR: ""

test:
  stage: Test
  image: docker:20-git
  services:
    - docker:20-dind
  variables:
    DATABASE_URL: "postgres://postgres:postgres@postgres:5432/{{cookiecutter.project_slug}}"
    POSTGRES_DB: "{{cookiecutter.project_slug}}"
    POSTGRES_INITDB_ARGS: "--no-sync"
    POSTGRES_PASSWORD: "postgres"
  before_script:
    - "docker login -u gitlab-ci-token -p $CI_BUILD_TOKEN $CI_REGISTRY"
  script:
    - "docker pull $CI_REGISTRY/$CI_PROJECT_PATH:test-$CI_COMMIT_BEFORE_SHA || true"
    - "docker build --cache-from $CI_REGISTRY/$CI_PROJECT_PATH:test-$CI_COMMIT_BEFORE_SHA -t $CI_REGISTRY/$CI_PROJECT_PATH:test-$CI_COMMIT_SHA --target test --pull ."
    - "docker push $CI_REGISTRY/$CI_PROJECT_PATH:test-$CI_COMMIT_SHA"
    - "docker run -e POSTGRES_DB -e POSTGRES_INITDB_ARGS -e POSTGRES_PASSWORD -d --name postgres postgres:12"
    - "docker run --name backend --link=postgres -e DATABASE_URL $CI_REGISTRY/$CI_PROJECT_PATH:test-$CI_COMMIT_SHA"
    - "docker cp backend:/app/htmlcov htmlcov"
  after_script:
    - "docker logout $CI_REGISTRY"
  coverage: '/^TOTAL.*\s+(\d+\%)$/'
  artifacts:
    paths:
      - htmlcov
    expire_in: 1 day

pages:
  stage: Report
  image: busybox
  script:
    - mv htmlcov public
  artifacts:
    paths:
      - public
  dependencies:
    - test
  only:
    - develop

build:
  stage: Build
  image: docker:20-git
  services:
    - docker:20-dind
  before_script:
    - "docker login -u gitlab-ci-token -p $CI_BUILD_TOKEN $CI_REGISTRY"
  script:
    - "docker pull $CI_REGISTRY/$CI_PROJECT_PATH:test-$CI_COMMIT_SHA || true"
    - "docker build --cache-from $CI_REGISTRY/$CI_PROJECT_PATH:test-$CI_COMMIT_SHA -t $CI_REGISTRY/$CI_PROJECT_PATH:$CI_COMMIT_SHA --target remote --pull ."
    - "docker push $CI_REGISTRY/$CI_PROJECT_PATH:$CI_COMMIT_SHA"
  after_script:
    - "docker logout $CI_REGISTRY"
  only:
    - develop
    - master
    - tags

.deploy:
  stage: Deploy
  image:
    name: bitnami/kubectl:latest
    entrypoint: [""]
  before_script:
    - kubectl config set-cluster my-cluster --server=${KUBE_URL} --certificate-authority="${KUBE_CA_PEM_FILE}"
    - kubectl config set-credentials admin --token=${KUBE_TOKEN}
    - kubectl config set-context my-context --cluster=my-cluster --user=admin --namespace=default
    - kubectl config use-context my-context

deploy_development:
  extends: .deploy
  only:
    - develop
  environment:
    name: development
  script:
    - sed -i "s/__IMAGE_TAG__/$CI_COMMIT_SHA/" k8s/development/1_backend.yaml
    - kubectl apply -f k8s/development/

rollback_development:
  extends: .deploy
  only:
    - develop
  environment:
    name: development
  when: manual
  script:
    - sed -i "s/__IMAGE_TAG__/$CI_COMMIT_BEFORE_SHA/" k8s/development/1_backend.yaml
    - kubectl apply -f k8s/development/

deploy_integration:
  extends: .deploy
  only:
    - master
  environment:
    name: integration
  script:
    - sed -i "s/__IMAGE_TAG__/$CI_COMMIT_SHA/" k8s/integration/1_backend.yaml
    - kubectl apply -f k8s/integration/

rollback_integration:
  extends: .deploy
  only:
    - master
  environment:
    name: integration
  when: manual
  script:
    - sed -i "s/__IMAGE_TAG__/$CI_COMMIT_BEFORE_SHA/" k8s/integration/1_backend.yaml
    - kubectl apply -f k8s/integration/

deploy_production:
  extends: .deploy
  only:
    - tags
  environment:
    name: production
  script:
    - sed -i "s/__IMAGE_TAG__/$CI_COMMIT_SHA/" k8s/production/1_backend.yaml
    - kubectl apply -f k8s/production/

rollback_production:
  extends: .deploy
  only:
    - tags
  environment:
    name: production
  when: manual
  script:
    - sed -i "s/__IMAGE_TAG__/$CI_COMMIT_BEFORE_SHA/" k8s/production/1_backend.yaml
    - kubectl apply -f k8s/production/

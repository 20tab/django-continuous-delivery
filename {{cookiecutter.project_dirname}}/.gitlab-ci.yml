stages:
  - Test
  - Pact-verify
  - Pact-check
  - Build
  - Deploy
  - Pact-tag
  - Report
  - Sentry

variables:
  COMPOSE_DOCKER_CLI_BUILD: 1
  DOCKER_BUILDKIT: 1
  PACT_PROVIDER_NAME: {{ cookiecutter.project_slug }}-{{ cookiecutter.service_slug }}
  SENTRY_PROJECT_NAME: {{ cookiecutter.project_slug }}-{{ cookiecutter.service_slug }}
  VERSION_BEFORE_REF: $CI_COMMIT_BEFORE_SHA
  VERSION_REF: $CI_COMMIT_SHA

sentry_release:
  stage: .pre
  image: docker:20
  services:
    - docker:20-dind
  rules:
    - if: $SENTRY_DSN && $CI_COMMIT_BRANCH == "develop"
  script:
    - RELEASE_START=$(date +%s)
    - >
      docker run --rm
      -v ${PWD}:${PWD}
      -w ${PWD}
      -e SENTRY_AUTH_TOKEN
      -e SENTRY_DSN
      -e SENTRY_ORG
      -e SENTRY_URL
      getsentry/sentry-cli:latest sh -c
      "sentry-cli releases new $VERSION_REF -p $SENTRY_PROJECT_NAME --log-level=debug;
      sentry-cli releases set-commits $VERSION_REF --auto;
      sentry-cli releases finalize $VERSION_REF"

test:
  stage: Test
  image: docker/compose:debian-1.29.2
  services:
    - docker:20-dind
  variables:
    {{ cookiecutter.service_slug|upper }}_CONTAINER_NAME: "${CI_PROJECT_PATH_SLUG}-${CI_JOB_NAME}-${CI_JOB_ID}_{{ cookiecutter.service_slug }}"
    {{ cookiecutter.service_slug|upper }}_BUILD_TARGET: "test"
    {{ cookiecutter.service_slug|upper }}_IMAGE_NAME: "gitlabci_{{ cookiecutter.project_slug }}_{{ cookiecutter.service_slug }}"
    {{ cookiecutter.service_slug|upper }}_IMAGE_TAG: "$CI_JOB_NAME-$CI_JOB_ID"
    COMPOSE_PROJECT_NAME: "${CI_PROJECT_PATH_SLUG}-${CI_JOB_NAME}-${CI_JOB_ID}"
  script:
    - docker-compose build
    - docker-compose run --name ${{ "{" }}{{ cookiecutter.service_slug|upper }}_CONTAINER_NAME} {{ cookiecutter.service_slug }}
    - docker cp ${{ "{" }}{{ cookiecutter.service_slug|upper }}_CONTAINER_NAME}:/app/htmlcov htmlcov
  after_script:
    - docker-compose down -v
  coverage: '/^TOTAL.*\s+(\d+\%)$/'
  artifacts:
    paths:
      - htmlcov
    expire_in: 1 day

pact-verify-test:
  stage: Pact-verify
  image: docker:20
  services:
    - docker:20-dind
  variables:
    {{ cookiecutter.service_slug|upper }}_BUILD_TARGET: "test"
    {{ cookiecutter.service_slug|upper }}_IMAGE_NAME: "gitlabci_{{ cookiecutter.project_slug }}_{{ cookiecutter.service_slug }}"
    {{ cookiecutter.service_slug|upper }}_IMAGE_TAG: "$CI_JOB_NAME-$CI_JOB_ID"
    COMPOSE_PROJECT_NAME: "$CI_PROJECT_PATH_SLUG-$CI_JOB_NAME-$CI_JOB_ID"
  rules:
    - if: $PACT_ENABLED && $CI_COMMIT_BRANCH && $CI_COMMIT_BRANCH != "master" && $CI_JOB_TRIGGERED != "true"
      allow_failure: true
  before_script:
    - if [ "$CI_COMMIT_BRANCH" ]; then PACT_CONSUMER_TAG="branch:$CI_COMMIT_BRANCH"; else PACT_CONSUMER_TAG="tag:$CI_COMMIT_TAG"; fi
  script:
    - docker-compose build
    - >
      docker-compose run --rm {{ cookiecutter.service_slug }} ./scripts/pact_verify.sh
      --pact-provider-version=$VERSION_REF
      --pact-verify-consumer-tag=$PACT_CONSUMER_TAG
      --pact-verify-consumer-tag="env:development"
      --pact-publish-results
  after_script:
    - docker-compose down -v

pact-verify-webhook:
  stage: Pact-verify
  image: docker:20
  services:
    - docker:20-dind
  variables:
    COMPOSE_PROJECT_NAME: "$CI_PROJECT_PATH_SLUG-$CI_JOB_NAME-$CI_JOB_ID"
    {{ cookiecutter.service_slug|upper }}_IMAGE_NAME: "gitlabci_{{ cookiecutter.project_slug }}_{{ cookiecutter.service_slug }}"
    {{ cookiecutter.service_slug|upper }}_BUILD_TARGET: "test"
  rules:
    - if: $PACT_ENABLED && $CI_JOB_TRIGGERED == "true"
      allow_failure: true
  script:
    - docker-compose build
    - >
      docker-compose run --rm {{ cookiecutter.service_slug }} ./scripts/pact_verify.sh
      --pact-provider-version=$VERSION_REF
      --pact-verify-consumer-tag=$PACT_CONSUMER_TAG
      --pact-publish-results
  after_script:
    - docker-compose down -v

pages:
  stage: Report
  image: busybox
  rules:
    - if: $CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH
  script:
    - mkdir public
    - mv htmlcov public/htmlcov
  artifacts:
    paths:
      - public
  dependencies:
    - test

build:
  stage: Build
  image: docker:20
  rules:
    - if: ($CI_COMMIT_BRANCH == "develop" ||  $CI_COMMIT_BRANCH == "master" ||  $CI_COMMIT_TAG) && $CI_JOB_TRIGGERED != "true"
  services:
    - docker:20-dind
  before_script:
    - export DOCKER_CONFIG=$PWD/.dockerconfig
    - docker login -u gitlab-ci-token -p $CI_BUILD_TOKEN $CI_REGISTRY
  script:
    - docker build -t $CI_REGISTRY/$CI_PROJECT_PATH:$VERSION_REF --target remote --pull .
    - docker push $CI_REGISTRY/$CI_PROJECT_PATH:$VERSION_REF
  after_script:
    - docker logout $CI_REGISTRY

.development:
  rules:
    - if: $CI_COMMIT_BRANCH == "develop" && $CI_JOB_TRIGGERED != "true"
      variables:
        ENVIRONMENT_SLUG: dev
  environment:
    name: Development
    url: {{ cookiecutter.project_url_dev }}

.staging:
  rules:
    - if: $CI_COMMIT_BRANCH == "master" && $CI_JOB_TRIGGERED != "true"
      variables:
        ENVIRONMENT_SLUG: stage
  environment:
    name: Staging
    url: {{ cookiecutter.project_url_stage }}

.production:
  rules:
    - if: $CI_COMMIT_TAG && $CI_JOB_TRIGGERED != "true"
      variables:
        ENVIRONMENT_SLUG: prod
  environment:
    name: Production
    url: {{ cookiecutter.project_url_prod }}

.can-i-deploy:
  stage: Pact-check
  dependencies:
    - test
  image:
    name: docker:20
  services:
    - docker:20-dind
  script:
    - >
      docker run --rm
      -e PACT_BROKER_BASE_URL
      -e PACT_BROKER_PASSWORD
      -e PACT_BROKER_USERNAME
      pactfoundation/pact-cli:latest-node14 pact-broker can-i-deploy
      --pacticipant $PACT_PROVIDER_NAME
      --version $VERSION_REF
      --to "env:$DEPLOY_ENVIRONMENT"

can-i-deploy_development:
  extends:
    - .development
    - .can-i-deploy
  rules:
    - if: $PACT_ENABLED == "true" && $CI_COMMIT_BRANCH == "develop" && $CI_JOB_TRIGGERED != "true"
      allow_failure: false

can-i-deploy_staging:
  extends:
    - .staging
    - .can-i-deploy
  rules:
    - if: $PACT_ENABLED == "true" && $CI_COMMIT_BRANCH == "master" && $CI_JOB_TRIGGERED != "true"
      allow_failure: false

can-i-deploy_production:
  extends:
    - .production
    - .can-i-deploy
  rules:
    - if: $PACT_ENABLED == "true" && $CI_COMMIT_TAG && $CI_JOB_TRIGGERED != "true"
      allow_failure: false

.deploy:
  stage: Deploy
  image:
    name: docker:20
  services:
    - docker:20-dind
  variables:
    TF_ROOT: ${CI_PROJECT_DIR}/terraform/
  before_script:
    - export TF_VAR_service_container_image=${CI_REGISTRY_IMAGE}:${VERSION_REF}
  script:
    - >
      docker run --rm
      -u `id -u`
      -v ${KUBECONFIG}:${KUBECONFIG}
      -v ${PWD}:${PWD}
      -w ${PWD}
      -e CI_JOB_TOKEN
      -e KUBE_CONFIG_PATH="${KUBECONFIG}"
      -e TF_ADDRESS=${CI_API_V4_URL}/projects/${CI_PROJECT_ID}/terraform/state/{{ cookiecutter.project_slug }}-${ENVIRONMENT_SLUG}
      -e TF_ROOT
      -e TF_VAR_cache_url="${CACHE_URL}"
      -e TF_VAR_database_url="${DATABASE_URL}"
      -e TF_VAR_django_admins="${DJANGO_ADMINS}"
      -e TF_VAR_django_allowed_hosts="${DJANGO_ALLOWED_HOSTS}"
      -e TF_VAR_django_configuration="${CI_ENVIRONMENT_NAME}"
      -e TF_VAR_django_default_from_email="${DJANGO_DEFAULT_FROM_EMAIL}"
      -e TF_VAR_django_server_email="${DJANGO_SERVER_EMAIL}"
      -e TF_VAR_email_url="${EMAIL_URL}"
      -e TF_VAR_environment="${CI_ENVIRONMENT_NAME}"
      -e TF_VAR_media_storage
      -e TF_VAR_project_url="${CI_ENVIRONMENT_URL}"
      -e TF_VAR_s3_bucket_access_id="${S3_BUCKET_ACCESS_ID}"
      -e TF_VAR_s3_bucket_endpoint_url="${S3_BUCKET_ENDPOINT_URL}"
      -e TF_VAR_s3_bucket_file_overwrite="${S3_BUCKET_FILE_OVERWRITE}"
      -e TF_VAR_s3_bucket_name="${S3_BUCKET_NAME}"
      -e TF_VAR_s3_bucket_secret_key="${S3_BUCKET_SECRET_KEY}"
      -e TF_VAR_sentry_dsn="${SENTRY_DSN}"
      -e TF_VAR_service_container_image
      -e TF_VAR_service_container_port
      -e TF_VAR_service_replicas
      registry.gitlab.com/gitlab-org/terraform-images/stable:latest ./scripts/deploy.sh
  artifacts:
    name: plan
    paths:
      - ${TF_ROOT}/plan.cache
    reports:
      terraform: ${TF_ROOT}/plan.json

deploy_development:
  extends:
    - .development
    - .deploy

deploy_staging:
  extends:
    - .staging
    - .deploy

deploy_production:
  extends:
    - .production
    - .deploy

.create-version-tag:
  image:
    name: docker:20
  services:
    - docker:20-dind
  stage: Pact-tag

create-version-tag_features:
  extends: .create-version-tag
  rules:
    - if: $PACT_ENABLED == "true" && $CI_COMMIT_BRANCH && $CI_COMMIT_BRANCH != "develop" && $CI_COMMIT_BRANCH != "master" && $CI_JOB_TRIGGERED != "true"
  script:
    - >
      docker run --rm
      -e PACT_BROKER_BASE_URL
      -e PACT_BROKER_PASSWORD
      -e PACT_BROKER_USERNAME
      pactfoundation/pact-cli:latest-node14 pact-broker create-version-tag
      --pacticipant $PACT_PROVIDER_NAME
      --version $VERSION_REF
      --tag "branch:$CI_COMMIT_BRANCH"

create-version-tag_development:
  extends: .create-version-tag
  rules:
    - if: $PACT_ENABLED == "true" && $CI_COMMIT_BRANCH == "develop" && $CI_JOB_TRIGGERED != "true"
  script:
    - >
      docker run --rm
      -e PACT_BROKER_BASE_URL
      -e PACT_BROKER_PASSWORD
      -e PACT_BROKER_USERNAME
      pactfoundation/pact-cli:latest-node14 pact-broker create-version-tag
      --pacticipant $PACT_PROVIDER_NAME
      --version $VERSION_REF
      --tag "env:development"
      --tag "branch:develop"

.sentry_deploy_success:
  stage: Sentry
  image: docker:20
  services:
    - docker:20-dind
  script:
    - RELEASE_END=$(date +%s)
    - >
      docker run --rm
      -e SENTRY_AUTH_TOKEN
      -e SENTRY_DSN
      -e SENTRY_ORG
      -e SENTRY_URL
      getsentry/sentry-cli:latest sentry-cli releases deploys $VERSION_REF new -e $SENTRY_ENV -t $((RELEASE_END-RELEASE_START))

sentry_success_development:
  extends: .sentry_deploy_success
  rules:
    - if: $SENTRY_DSN && $CI_COMMIT_BRANCH == "develop"
      when: on_success
      variables:
        SENTRY_ENV: Development

sentry_success_staging:
  extends: .sentry_deploy_success
  rules:
    - if: $SENTRY_DSN && $CI_COMMIT_BRANCH == "master"
      when: on_success
      variables:
        SENTRY_ENV: Staging

sentry_success_production:
  extends: .sentry_deploy_success
  rules:
    - if: $SENTRY_DSN && $CI_COMMIT_TAG
      when: on_success
      variables:
        SENTRY_ENV: Production

.sentry_deploy_failure:
  stage: Sentry
  image: docker:20
  services:
    - docker:20-dind
  script:
    - >
      docker run --rm
      -e SENTRY_AUTH_TOKEN
      -e SENTRY_DSN
      -e SENTRY_ORG
      -e SENTRY_URL
      getsentry/sentry-cli:latest sentry-cli send-event -m "Deploy to $SENTRY_ENV failed."

sentry_failure_development:
  extends: .sentry_deploy_failure
  rules:
    - if: $SENTRY_DSN && $CI_COMMIT_BRANCH == "develop"
      when: on_failure
      variables:
        SENTRY_ENV: Development

sentry_failure_staging:
  extends: .sentry_deploy_failure
  rules:
    - if: $SENTRY_DSN && $CI_COMMIT_BRANCH == "master"
      when: on_failure
      variables:
        SENTRY_ENV: Staging

sentry_failure_production:
  extends: .sentry_deploy_failure
  rules:
    - if: $SENTRY_DSN && $CI_COMMIT_TAG
      when: on_failure
      variables:
        SENTRY_ENV: Production

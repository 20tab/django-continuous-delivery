stages:
  - Test
  - Pact-verify
  - Pact-check
  - Build
  - Deploy
  - Pact-tag
  - Report
  - Sentry

variables:
  COMPOSE_DOCKER_CLI_BUILD: 1
  DOCKER_BUILDKIT: 1
  PACT_BROKER_URL: "${PACT_BROKER_AUTH_URL}"
  PACT_PROVIDER_NAME: {{ cookiecutter.project_slug }}-{{ cookiecutter.service_slug }}
  SENTRY_PROJECT_NAME: {{ cookiecutter.project_slug }}-{{ cookiecutter.service_slug }}
  VERSION_BEFORE_REF: $CI_COMMIT_BEFORE_SHA
  VERSION_REF: $CI_COMMIT_SHA

sentry_release:
  stage: .pre
  image: docker:20
  services:
    - docker:20-dind
  rules:
    - &pipeline-push-rule
      if: $CI_PIPELINE_SOURCE == "trigger"
      when: never
    - if: $SENTRY_DSN && ($CI_COMMIT_BRANCH == "develop" || $CI_COMMIT_BRANCH == "main" || $CI_COMMIT_TAG)
  script:
    - RELEASE_START=$(date +%s)
    - >
      docker run --rm
      -v ${PWD}:${PWD}
      -w ${PWD}
      -e SENTRY_AUTH_TOKEN
      -e SENTRY_DSN
      -e SENTRY_ORG
      -e SENTRY_URL
      getsentry/sentry-cli:latest sh -c
      "sentry-cli releases new $VERSION_REF -p $SENTRY_PROJECT_NAME --log-level=debug;
      sentry-cli releases set-commits $VERSION_REF --auto;
      sentry-cli releases finalize $VERSION_REF"

test:
  stage: Test
  image: docker/compose:debian-1.29.2
  services:
    - docker:20-dind
  needs: []
  rules:
    - if: $CI_PIPELINE_SOURCE != "trigger" && $CI_PIPELINE_SOURCE != "merge_request_event"
  variables:
    {{ cookiecutter.service_slug|upper }}_CONTAINER_NAME: "${CI_PROJECT_PATH_SLUG}-${CI_JOB_NAME}-${CI_JOB_ID}_{{ cookiecutter.service_slug }}"
    {{ cookiecutter.service_slug|upper }}_BUILD_TARGET: "test"
    {{ cookiecutter.service_slug|upper }}_IMAGE_NAME: "gitlabci_{{ cookiecutter.project_slug }}_{{ cookiecutter.service_slug }}"
    {{ cookiecutter.service_slug|upper }}_IMAGE_TAG: "$CI_JOB_NAME-$CI_JOB_ID"
    COMPOSE_PROJECT_NAME: "${CI_PROJECT_PATH_SLUG}-${CI_JOB_NAME}-${CI_JOB_ID}"
  script:
    - docker-compose build
    - docker-compose run --name ${{ "{" }}{{ cookiecutter.service_slug|upper }}_CONTAINER_NAME} {{ cookiecutter.service_slug }}
    - docker cp ${{ "{" }}{{ cookiecutter.service_slug|upper }}_CONTAINER_NAME}:/app/htmlcov htmlcov
  after_script:
    - docker-compose down -v
  coverage: '/^TOTAL.*\s+(\d+\%)$/'
  artifacts:
    expire_in: 1 day
    paths:
      - htmlcov
    when: always

pact-verify-test:
  stage: Pact-verify
  image: docker/compose:debian-1.29.2
  services:
    - docker:20-dind
  needs: []
  variables:
    {{ cookiecutter.service_slug|upper }}_BUILD_TARGET: "test"
    {{ cookiecutter.service_slug|upper }}_IMAGE_NAME: "gitlabci_{{ cookiecutter.project_slug }}_{{ cookiecutter.service_slug }}"
    {{ cookiecutter.service_slug|upper }}_IMAGE_TAG: "$CI_JOB_NAME-$CI_JOB_ID"
    COMPOSE_PROJECT_NAME: "$CI_PROJECT_PATH_SLUG-$CI_JOB_NAME-$CI_JOB_ID"
  rules:
    - <<: *pipeline-push-rule
    - if: $PACT_ENABLED == "true"
      allow_failure: true
  before_script:
    - if [ "$CI_COMMIT_BRANCH" ]; then PACT_CONSUMER_TAG="branch:$CI_COMMIT_BRANCH"; else PACT_CONSUMER_TAG="tag:$CI_COMMIT_TAG"; fi
  script:
    - docker-compose build
    - >
      docker-compose run --rm {{ cookiecutter.service_slug }} ./scripts/pact_verify.sh
      --pact-provider-version=$VERSION_REF
      --pact-verify-consumer-tag=$PACT_CONSUMER_TAG
      --pact-verify-consumer-tag="env:development"
      --pact-verify-consumer-tag="env:staging"
      --pact-verify-consumer-tag="env:production"
      --pact-publish-results
  after_script:
    - docker-compose down -v

pact-verify-webhook:
  stage: Pact-verify
  image: docker/compose:debian-1.29.2
  services:
    - docker:20-dind
  variables:
    COMPOSE_PROJECT_NAME: "$CI_PROJECT_PATH_SLUG-$CI_JOB_NAME-$CI_JOB_ID"
    {{ cookiecutter.service_slug|upper }}_IMAGE_NAME: "gitlabci_{{ cookiecutter.project_slug }}_{{ cookiecutter.service_slug }}"
    {{ cookiecutter.service_slug|upper }}_BUILD_TARGET: "test"
  rules:
    - if: $CI_PIPELINE_SOURCE == "trigger" && $PACT_ENABLED == "true"
      allow_failure: true
  script:
    - docker-compose build
    - >
      docker-compose run --rm {{ cookiecutter.service_slug }} ./scripts/pact_verify.sh
      --pact-provider-version=$VERSION_REF
      --pact-verify-consumer-tag=$PACT_CONSUMER_TAG
      --pact-publish-results
  after_script:
    - docker-compose down -v

pages:
  stage: Report
  image: busybox
  needs: ["test"]
  rules:
    - <<: *pipeline-push-rule
    - if: $CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH
  script:
    - mkdir public
    - mv htmlcov public/htmlcov
  artifacts:
    paths:
      - public

.development:
  rules: &development-rules
    - <<: *pipeline-push-rule
    - &development-rule
      if: $CI_COMMIT_BRANCH == "develop"
      variables:
        ENVIRONMENT_SLUG: dev
        STACK_SLUG: "${STACK_SLUG_DEV}"
  environment:
    name: development{% if cookiecutter.project_url_dev %}
    url: {{ cookiecutter.project_url_dev }}{% endif %}

.staging:
  rules: &staging-rules
    - <<: *pipeline-push-rule
    - &staging-rule
      if: $CI_COMMIT_BRANCH == "main"
      variables:
        ENVIRONMENT_SLUG: stage
        STACK_SLUG: "${STACK_SLUG_STAGE}"
  environment:
    name: staging{% if cookiecutter.project_url_stage %}
    url: {{ cookiecutter.project_url_stage }}{% endif %}

.production:
  rules: &production-rules
    - <<: *pipeline-push-rule
    - &production-rule
      if: $CI_COMMIT_TAG
      variables:
        ENVIRONMENT_SLUG: prod
        STACK_SLUG: "${STACK_SLUG_PROD}"
  environment:
    name: production{% if cookiecutter.project_url_prod %}
    url: {{ cookiecutter.project_url_prod }}{% endif %}

.can-i-deploy:
  stage: Pact-check
  image:
    name: docker:20
  services:
    - docker:20-dind
  needs: ["pact-verify-test"]
  script:
    - >
      docker run --rm
      -e PACT_BROKER_BASE_URL
      -e PACT_BROKER_PASSWORD
      -e PACT_BROKER_USERNAME
      pactfoundation/pact-cli:latest-node14 pact-broker can-i-deploy
      --pacticipant $PACT_PROVIDER_NAME
      --version $VERSION_REF
      --to "env:$DEPLOY_ENVIRONMENT"

can-i-deploy_development:
  extends:
    - .development
    - .can-i-deploy
  rules:
    - &skip-pact-rule
      if: $PACT_ENABLED != "true"
      when: never
    - *development-rules

can-i-deploy_staging:
  extends:
    - .staging
    - .can-i-deploy
  rules:
    - <<: *skip-pact-rule
    - *staging-rules

can-i-deploy_production:
  extends:
    - .production
    - .can-i-deploy
  rules:
    - <<: *skip-pact-rule
    - *production-rules

.build:
  stage: Build
  image: docker:20
  services:
    - docker:20-dind
  before_script:
    - export DOCKER_CONFIG=$PWD/.dockerconfig
    - docker login -u gitlab-ci-token -p $CI_BUILD_TOKEN $CI_REGISTRY
  script:
    - docker build -t $CI_REGISTRY/$CI_PROJECT_PATH:$VERSION_REF --target remote --pull .
    - docker push $CI_REGISTRY/$CI_PROJECT_PATH:$VERSION_REF
  after_script:
    - docker logout $CI_REGISTRY

build_development:
  extends:
    - .build
    - .development
  needs:
    - job: can-i-deploy_development
      optional: true
    - job: test

build_staging:
  extends:
    - .staging
    - .build
  needs:
    - job: can-i-deploy_staging
      optional: true
    - job: test

build_production:
  extends:
    - .production
    - .build
  needs:
    - job: can-i-deploy_production
      optional: true
    - job: test

.deploy:
  stage: Deploy
  image:
    name: docker:20
  services:
    - docker:20-dind
  before_script:
    - export TF_VAR_service_container_image=${CI_REGISTRY_IMAGE}:${VERSION_REF}
  script:
    - >
      docker run --rm
      -u `id -u`
      -v ${PWD}:${PWD}
      -w ${PWD}
      -e CI_JOB_TOKEN
      -e TERRAFORM_BACKEND={{ cookiecutter.terraform_backend }}
      -e TERRAFORM_EXTRA_VAR_FILE=${ENVIRONMENT_SLUG}.tfvars
      -e TERRAFORM_VARS_DIR=${CI_PROJECT_DIR}/terraform/vars{% if cookiecutter.terraform_backend == "gitlab" %}
      -e TF_STATE_NAME=env_${ENVIRONMENT_SLUG}{% endif %}
      -e TF_ROOT=${CI_PROJECT_DIR}/terraform/{{ cookiecutter.deployment_type }}{% if cookiecutter.deployment_type == "digitalocean-k8s" %}
      -e TF_VAR_digitalocean_token="${DIGITALOCEAN_TOKEN}"{% endif %}
      -e TF_VAR_email_url="${EMAIL_URL}"
      -e TF_VAR_environment="${CI_ENVIRONMENT_NAME}"
      -e TF_VAR_project_slug="{{ cookiecutter.project_slug }}"
      -e TF_VAR_service_slug="{{ cookiecutter.service_slug }}"{% if cookiecutter.deployment_type == "other-k8s" %}
      -e TF_VAR_kubernetes_cluster_ca_certificate="${KUBERNETES_CLUSTER_CA_CERTIFICATE}"
      -e TF_VAR_kubernetes_host="${KUBERNETES_HOST}"
      -e TF_VAR_kubernetes_token="${KUBERNETES_TOKEN}"{% endif %}{% if "s3" in cookiecutter.media_storage %}
      -e TF_VAR_s3_access_id="${S3_ACCESS_ID}"
      -e TF_VAR_s3_secret_key="${S3_SECRET_KEY}"
      -e TF_VAR_s3_region="${S3_REGION}"{% if cookiecutter.media_storage == "digitalocean-s3" %}
      -e TF_VAR_s3_host="${S3_HOST}"{% elif cookiecutter.media_storage == "aws-s3" %}
      -e TF_VAR_s3_bucket_name="${S3_BUCKET_NAME}"{% endif %}{% endif %}
      -e TF_VAR_sentry_dsn="${SENTRY_DSN}"
      -e TF_VAR_service_container_image{% if cookiecutter.terraform_backend != "gitlab" %}
      -e TF_WORKSPACE="{{ cookiecutter.project_slug }}_backend_environment_${ENVIRONMENT_SLUG}"{% endif %}
      -e TFC_TOKEN
      registry.gitlab.com/gitlab-org/terraform-images/stable:latest ./scripts/deploy.sh
  artifacts:
    name: plan
    reports:
      terraform: ${TF_ROOT}/plan.json

deploy_development:
  extends:
    - .development
    - .deploy
  needs: ["build_development"]

deploy_staging:
  extends:
    - .staging
    - .deploy
  needs: ["build_staging"]

deploy_production:
  extends:
    - .production
    - .deploy
  needs: ["build_production"]

.rollback:
  extends: .deploy
  before_script:
    - export TF_VAR_service_container_image=${CI_REGISTRY_IMAGE}:${VERSION_BEFORE_REF}

rollback_development:
  extends:
    - .development
    - .rollback
  needs: ["deploy_development"]
  rules:
    - <<: *pipeline-push-rule
    - <<: *development-rule
      when: manual
      allow_failure: true

rollback_staging:
  extends:
    - .staging
    - .rollback
  needs: ["deploy_staging"]
  rules:
    - <<: *pipeline-push-rule
    - <<: *staging-rule
      when: manual
      allow_failure: true

rollback_production:
  extends:
    - .production
    - .rollback
  needs: ["deploy_production"]
  rules:
    - <<: *pipeline-push-rule
    - <<: *production-rule
      when: manual
      allow_failure: true

.create-version-tag:
  image:
    name: docker:20
  services:
    - docker:20-dind
  stage: Pact-tag

create-version-tag_development:
  extends: .create-version-tag
  needs: ["deploy_development"]
  rules:
    - <<: *skip-pact-rule
    - *development-rules
  script:
    - >
      docker run --rm
      -e PACT_BROKER_BASE_URL
      -e PACT_BROKER_PASSWORD
      -e PACT_BROKER_USERNAME
      pactfoundation/pact-cli:latest-node14 pact-broker create-version-tag
      --pacticipant $PACT_PROVIDER_NAME
      --version $VERSION_REF
      --tag "env:development"

create-version-tag_staging:
  extends: .create-version-tag
  needs: ["deploy_staging"]
  rules:
    - <<: *skip-pact-rule
    - *staging-rules
  script:
    - >
      docker run --rm
      -e PACT_BROKER_BASE_URL
      -e PACT_BROKER_PASSWORD
      -e PACT_BROKER_USERNAME
      pactfoundation/pact-cli:latest-node14 pact-broker create-version-tag
      --pacticipant $PACT_PROVIDER_NAME
      --version $VERSION_REF
      --tag "env:staging"

create-version-tag_production:
  extends: .create-version-tag
  needs: ["deploy_production"]
  rules:
    - <<: *skip-pact-rule
    - *production-rules
  script:
    - >
      docker run --rm
      -e PACT_BROKER_BASE_URL
      -e PACT_BROKER_PASSWORD
      -e PACT_BROKER_USERNAME
      pactfoundation/pact-cli:latest-node14 pact-broker create-version-tag
      --pacticipant $PACT_PROVIDER_NAME
      --version $VERSION_REF
      --tag "env:production"

.sentry_deploy_success:
  stage: Sentry
  image: docker:20
  services:
    - docker:20-dind
  script:
    - RELEASE_END=$(date +%s)
    - >
      docker run --rm
      -e SENTRY_AUTH_TOKEN
      -e SENTRY_DSN
      -e SENTRY_ORG
      -e SENTRY_URL
      getsentry/sentry-cli:latest sentry-cli releases deploys $VERSION_REF new -e $CI_ENVIRONMENT_NAME -t $((RELEASE_END-RELEASE_START))

sentry_success_development:
  extends:
    - .development
    - .sentry_deploy_success
  needs: ["deploy_development"]
  rules:
    - &sentry-rule
      if: $SENTRY_DSN == null
      when: never
    - <<: *pipeline-push-rule
    - <<: *development-rule
      when: on_success

sentry_success_staging:
  extends:
    - .staging
    - .sentry_deploy_success
  needs: ["deploy_staging"]
  rules:
    - <<: *sentry-rule
    - <<: *pipeline-push-rule
    - <<: *staging-rule
      when: on_success

sentry_success_production:
  extends:
    - .production
    - .sentry_deploy_success
  needs: ["deploy_production"]
  rules:
    - <<: *sentry-rule
    - <<: *pipeline-push-rule
    - <<: *production-rule
      when: on_success

.sentry_deploy_failure:
  stage: Sentry
  image: docker:20
  services:
    - docker:20-dind
  script:
    - >
      docker run --rm
      -e SENTRY_AUTH_TOKEN
      -e SENTRY_DSN
      -e SENTRY_ORG
      -e SENTRY_URL
      getsentry/sentry-cli:latest sentry-cli send-event -m "Deploy to $CI_ENVIRONMENT_NAME failed."

sentry_failure_development:
  extends:
    - .development
    - .sentry_deploy_failure
  rules:
    - <<: *sentry-rule
    - <<: *pipeline-push-rule
    - <<: *development-rule
      when: on_failure

sentry_failure_staging:
  extends:
    - .staging
    - .sentry_deploy_failure
  rules:
    - <<: *sentry-rule
    - <<: *pipeline-push-rule
    - <<: *staging-rule
      when: on_failure

sentry_failure_production:
  extends:
    - .production
    - .sentry_deploy_failure
  rules:
    - <<: *sentry-rule
    - <<: *pipeline-push-rule
    - <<: *production-rule
      when: on_failure
